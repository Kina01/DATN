package com.example.backend.Service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import com.example.backend.Repository.UserRepository;

import java.security.SecureRandom;
// import java.util.Random;

@Service
public class EmailVerificationService {

    @Autowired
    private JavaMailSender mailSender;
    
    @Autowired
    private CacheManager cacheManager;
    
    @Autowired
    private UserRepository userRepository;
    
    private static final String CACHE_NAME = "verificationCodes";
    private static final long CODE_EXPIRATION_MINUTES = 10;
    // private static final int OTP_LENGTH = 6;
    
    // S·ª≠ d·ª•ng SecureRandom ƒë·ªÉ b·∫£o m·∫≠t h∆°n
    private final SecureRandom secureRandom = new SecureRandom();
    
    public String generateAndSendVerificationCode(String email) {
        // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
        if (userRepository.existsByEmail(email)) {
            throw new RuntimeException("Email ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω");
        }
        
        String code = generateSecureRandomCode();
        sendVerificationEmail(email, code);
        
        // L∆∞u m√£ v√†o cache
        Cache cache = cacheManager.getCache(CACHE_NAME);
        if (cache != null) {
            cache.put(email, code);
        }
        
        return code;
    }
    
    public boolean verifyCode(String email, String code) {
        System.out.println("DEBUG: Verifying code for: " + email);
        System.out.println("DEBUG: Input code: " + code);

        Cache cache = cacheManager.getCache(CACHE_NAME);
        if (cache == null) {
            System.out.println("DEBUG: Cache is null!");
            return false;
        }
        
        String storedCode = cache.get(email, String.class);
        System.out.println("DEBUG: Stored code: " + storedCode);
        return code != null && code.equals(storedCode);
    }
    
    public void clearVerificationCode(String email) {
        Cache cache = cacheManager.getCache(CACHE_NAME);
        if (cache != null) {
            cache.evict(email);
        }
    }
    
    /**
     * T·∫°o m√£ OTP ng·∫´u nhi√™n 6 s·ªë b·∫£o m·∫≠t
     * S·ª≠ d·ª•ng SecureRandom ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh ng·∫´u nhi√™n m·∫°nh
     */
    private String generateSecureRandomCode() {
        // T·∫°o s·ªë ng·∫´u nhi√™n t·ª´ 0 ƒë·∫øn 999999
        int randomNumber = secureRandom.nextInt(1000000);
        
        // Format th√†nh 6 ch·ªØ s·ªë, th√™m s·ªë 0 ·ªü ƒë·∫ßu n·∫øu c·∫ßn
        return String.format("%06d", randomNumber);
    }
    
    // /**
    //  * Alternative: T·∫°o m√£ OTP b·∫±ng c√°ch random t·ª´ng ch·ªØ s·ªë
    //  * ƒê·∫£m b·∫£o lu√¥n c√≥ 6 ch·ªØ s·ªë v√† kh√¥ng b·ªã thi·∫øu s·ªë 0 ·ªü ƒë·∫ßu
    //  */
    // private String generateDigitByDigitCode() {
    //     StringBuilder code = new StringBuilder(OTP_LENGTH);
    //     for (int i = 0; i < OTP_LENGTH; i++) {
    //         code.append(secureRandom.nextInt(10)); // Random t·ª´ 0-9
    //     }
    //     return code.toString();
    // }
    
    // /**
    //  * Alternative: T·∫°o m√£ OTP v·ªõi custom pattern
    //  * C√≥ th·ªÉ bao g·ªìm c·∫£ ch·ªØ v√† s·ªë n·∫øu mu·ªën
    //  */
    // private String generateCustomPatternCode() {
    //     String characters = "0123456789"; // Ch·ªâ s·ªë
    //     // String characters = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"; // S·ªë v√† ch·ªØ hoa
    //     // String characters = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"; // S·ªë v√† ch·ªØ
        
    //     StringBuilder code = new StringBuilder(OTP_LENGTH);
    //     for (int i = 0; i < OTP_LENGTH; i++) {
    //         int index = secureRandom.nextInt(characters.length());
    //         code.append(characters.charAt(index));
    //     }
    //     return code.toString();
    // }
    
    private void sendVerificationEmail(String toEmail, String code) {
        try {
            SimpleMailMessage message = new SimpleMailMessage();
            message.setTo(toEmail);
            message.setSubject("üîê M√£ x√°c th·ª±c ƒëƒÉng k√Ω - DataClass");
            message.setText("Xin ch√†o!\n\n" +
                           "M√£ x√°c th·ª±c c·ªßa b·∫°n l√†: üî¢ " + code + 
                           "\n\nM√£ c√≥ hi·ªáu l·ª±c trong " + CODE_EXPIRATION_MINUTES + " ph√∫t." +
                           "\n\n‚ö†Ô∏è L∆∞u √Ω: Kh√¥ng chia s·∫ª m√£ n√†y v·ªõi b·∫•t k·ª≥ ai." +
                           "\n\nN·∫øu b·∫°n kh√¥ng y√™u c·∫ßu m√£ n√†y, vui l√≤ng b·ªè qua email n√†y." +
                           "\n\nTr√¢n tr·ªçng,\nƒê·ªôi ng≈© DataClass");
            
            mailSender.send(message);
        } catch (Exception e) {
            throw new RuntimeException("L·ªói g·ª≠i email: " + e.getMessage());
        }
    }
    
    // Helper method ƒë·ªÉ test m√£ OTP
    public String generateTestCode() {
        return generateSecureRandomCode();
    }
    
    @Scheduled(fixedRate = 300000) // D·ªçn d·∫πp m·ªói 5 ph√∫t
    public void cleanupExpiredCodes() {
        // Cache s·∫Ω t·ª± ƒë·ªông h·∫øt h·∫°n theo c·∫•u h√¨nh
    }
}